import { jwtDecode } from 'jwt-decode'
import React, { useEffect, useState } from 'react'
import toast from 'react-hot-toast'
import { useNavigate } from 'react-router-dom'
import macarons from '../../assets/macarons.png'
import { useUserStore } from '../../store/User'
import './Auth.scss'

const Auth = () => {
	const [userData, setUserData] = useState({
		name: '',
		bakeryName: '',
		email: '',
		password: '',
		role: '',
		bio: '',
		phone: '',
		location: '',
		priceRange: '',
	})

	const [passwordConfirm, setPasswordConfirm] = useState('')
	const [profileImage, setProfileImage] = useState(null)
	const [isLoginMode, setIsLoginMode] = useState(true)
	const [validationError, setValidationError] = useState('')
	const [smsCode, setSmsCode] = useState('')
	const [systemCode, setSystemCode] = useState('')
	const [showVerification, setShowVerification] = useState(false)
	const [phoneVerified, setPhoneVerified] = useState(false)
	const [countdown, setCountdown] = useState(0)
	const [canResend, setCanResend] = useState(true)
	const [showRoleSelection, setShowRoleSelection] = useState(false)

	const { createUser, loginUser } = useUserStore()
	const navigate = useNavigate()

	const validatePhoneNumber = phone => {
		const phoneRegex =
			/^(\+7|7|8)?[\s-]?\(?[489][0-9]{2}\)?[\s-]?[0-9]{3}[\s-]?[0-9]{2}[\s-]?[0-9]{2}$/
		return phoneRegex.test(phone.replace(/\s+/g, ''))
	}

	const formatPhoneNumber = phone => {
		const cleaned = phone.replace(/\D/g, '')
		if (cleaned.startsWith('8')) {
			return '+7' + cleaned.slice(1)
		} else if (cleaned.startsWith('7')) {
			return '+' + cleaned
		} else if (cleaned.length === 10) {
			return '+7' + cleaned
		}
		return phone
	}

	const generateVerificationCode = () => {
		return Math.floor(100000 + Math.random() * 900000).toString()
	}

	const sendSMSVerification = async phoneNumber => {
		try {
			const code = generateVerificationCode()
			setSystemCode(code)
			toast.success(`–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phoneNumber}`)
			toast.success(`–î–µ–º–æ –∫–æ–¥: ${code}`, { duration: 5000 })
			return { success: true, code }
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error)
			toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
			return { success: false }
		}
	}

	const startResendTimer = () => {
		setCanResend(false)
		setCountdown(60)

		const timer = setInterval(() => {
			setCountdown(prev => {
				if (prev <= 1) {
					setCanResend(true)
					clearInterval(timer)
					return 0
				}
				return prev - 1
			})
		}, 1000)
	}

	const verifyPhoneNumber = async () => {
		if (!userData.phone) {
			setValidationError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
			return
		}

		if (!validatePhoneNumber(userData.phone)) {
			setValidationError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
			return
		}

		const formattedPhone = formatPhoneNumber(userData.phone)
		setUserData(prev => ({ ...prev, phone: formattedPhone }))

		const result = await sendSMSVerification(formattedPhone)

		if (result.success) {
			setShowVerification(true)
			setValidationError('')
			startResendTimer()
		}
	}

	const resendVerificationCode = async () => {
		if (!canResend) return

		const result = await sendSMSVerification(userData.phone)
		if (result.success) {
			setSmsCode('')
			startResendTimer()
			toast.success('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ')
		}
	}

	const checkVerificationCode = () => {
		if (!smsCode) {
			setValidationError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
			return
		}

		if (smsCode === systemCode) {
			toast.success('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!')
			setShowVerification(false)
			setPhoneVerified(true)
			setSmsCode('')
			setValidationError('')
			handleUserAction(true)
		} else {
			setValidationError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
		}
	}

	const handlePhoneChange = e => {
		let value = e.target.value
		value = value.replace(/[^0-9+\s()-]/g, '')
		if (value.length > 18) return
		setUserData({ ...userData, phone: value })
		if (phoneVerified) {
			setPhoneVerified(false)
		}
	}

	const selectRole = role => {
		setUserData({ ...userData, role })
		setShowRoleSelection(false)
	}

	const handleUserAction = async (isAfterVerification = false) => {
		let response

		if (isLoginMode) {
			response = await loginUser({
				email: userData.email,
				password: userData.password,
			})
		} else {
			if (userData.password !== passwordConfirm) {
				setValidationError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
				return
			}

			if (showVerification && !isAfterVerification) return

			if (userData.phone && !phoneVerified && !isAfterVerification) {
				await verifyPhoneNumber()
				return
			}

			const formData = new FormData()
			Object.entries(userData).forEach(([key, value]) => {
				const safeValue = value ?? ''
				formData.append(key, safeValue)
			})
			if (profileImage) formData.append('image', profileImage)

			response = await createUser(formData)
		}

		const {
			success,
			token,
			message,
			userData: userDataResponse,
		} = response || {}

		if (success) {
			try {
				localStorage.setItem('token', token)
				localStorage.setItem('user', JSON.stringify(userDataResponse))

				const decoded = jwtDecode(token)
				const expiryTime = decoded.exp * 1000
				localStorage.setItem('expiryTime', expiryTime)

				setTimeout(() => {
					localStorage.clear()
					window.location.href = '/login'
				}, expiryTime - Date.now())

				navigate('/profile')
			} catch (decodeError) {
				console.error('JWT Decode failed:', decodeError)
				localStorage.clear()
				setValidationError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
			}
		} else {
			setValidationError(message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
		}
	}

	useEffect(() => {
		const token = localStorage.getItem('token')
		const expiryTime = localStorage.getItem('expiryTime')

		if (token && expiryTime) {
			const now = Date.now()
			const expiry = Number(expiryTime)

			if (isNaN(expiry) || now > expiry) {
				localStorage.clear()
				navigate('/login')
			} else {
				const remainingTime = expiry - now
				setTimeout(() => {
					localStorage.clear()
					window.location.href = '/login'
				}, remainingTime)

				navigate('/profile')
			}
		}
	}, [navigate])

	return (
		<main className='auth-page'>
			<div className='auth-container'>
				<div className='auth-form-wrapper'>
					<img src={macarons} alt='Logo' className='auth-logo' />
					<h1 className='auth-title'>
						{isLoginMode
							? '–í—Ö–æ–¥'
							: showVerification
							? '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
							: showRoleSelection
							? '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å'
							: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
					</h1>

					{!isLoginMode && showRoleSelection ? (
						<div className='role-selection'>
							<button
								className='role-card customer-role'
								onClick={() => selectRole('user')}
							>
								<div className='role-icon'>üõçÔ∏è</div>
								<h3>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</h3>
								<p>–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∫—É—Å–Ω—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –æ—Ç –ª—É—á—à–∏—Ö –∫–æ–Ω–¥–∏—Ç–µ—Ä–æ–≤</p>
							</button>
							<button
								className='role-card baker-role'
								onClick={() => selectRole('admin')}
							>
								<div className='role-icon'>üë®‚Äçüç≥</div>
								<h3>–ö–æ–Ω–¥–∏—Ç–µ—Ä</h3>
								<p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —à–µ–¥–µ–≤—Ä—ã</p>
							</button>
						</div>
					) : showVerification ? (
						<>
							<div className='verification-info-box'>
								<p>–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞</p>
								<p>
									<strong>{userData.phone}</strong>
								</p>
								<p>–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ SMS</p>
							</div>
							<input
								type='text'
								placeholder='–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
								value={smsCode}
								onChange={e =>
									setSmsCode(e.target.value.replace(/\D/g, '').slice(0, 6))
								}
								maxLength={6}
								className='verification-code-input'
							/>
							<button
								className='primary-button'
								onClick={checkVerificationCode}
								disabled={smsCode.length !== 6}
							>
								–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
							</button>

							<div className='resend-wrapper'>
								{canResend ? (
									<button
										className='resend-code-button'
										onClick={resendVerificationCode}
										type='button'
									>
										–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
									</button>
								) : (
									<p className='resend-countdown'>
										–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {countdown} —Å–µ–∫
									</p>
								)}
							</div>

							<button
								className='back-button'
								onClick={() => {
									setShowVerification(false)
									setSmsCode('')
									setValidationError('')
									setCountdown(0)
									setCanResend(true)
								}}
							>
								–ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
							</button>
						</>
					) : (
						<>
							{!isLoginMode && !userData.role && (
								<button
									className='select-role-button'
									onClick={() => setShowRoleSelection(true)}
								>
									–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å
								</button>
							)}

							{(!isLoginMode && userData.role) || isLoginMode ? (
								<>
									{!isLoginMode && (
										<input
											type='text'
											placeholder='–ò–º—è'
											name='name'
											value={userData.name}
											onChange={e =>
												setUserData({ ...userData, name: e.target.value })
											}
											className='auth-input'
										/>
									)}
									<input
										type='email'
										placeholder='–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞'
										name='email'
										value={userData.email}
										onChange={e =>
											setUserData({ ...userData, email: e.target.value })
										}
										className='auth-input'
									/>
									<input
										type='password'
										placeholder='–ü–∞—Ä–æ–ª—å'
										name='password'
										value={userData.password}
										onChange={e =>
											setUserData({ ...userData, password: e.target.value })
										}
										className='auth-input'
									/>
									{!isLoginMode && (
										<input
											type='password'
											placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
											value={passwordConfirm}
											onChange={e => setPasswordConfirm(e.target.value)}
											className='auth-input'
										/>
									)}
									{!isLoginMode && (
										<>
											<div className='phone-field-wrapper'>
												<input
													type='tel'
													name='phone'
													placeholder='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
													value={userData.phone}
													onChange={handlePhoneChange}
													className={`auth-input ${
														phoneVerified ? 'phone-verified' : ''
													}`}
												/>
												{phoneVerified && (
													<span className='phone-status-badge verified-badge'>
														‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
													</span>
												)}
											</div>

											{userData.role === 'admin' && (
												<>
													<input
														type='text'
														placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π'
														name='bakeryName'
														value={userData.bakeryName}
														onChange={e =>
															setUserData({
																...userData,
																bakeryName: e.target.value,
															})
														}
														className='auth-input'
													/>
													<input
														type='text'
														placeholder='–õ–æ–∫–∞—Ü–∏—è'
														name='location'
														value={userData.location}
														onChange={e =>
															setUserData({
																...userData,
																location: e.target.value,
															})
														}
														className='auth-input'
													/>
													<input
														type='number'
														placeholder='–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ –æ—Ç'
														name='priceRange'
														value={userData.priceRange}
														onChange={e =>
															setUserData({
																...userData,
																priceRange: e.target.value,
															})
														}
														className='auth-input'
													/>
												</>
											)}

											<div className='selected-role-display'>
												<span className='role-label'>–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å:</span>
												<span
													className={`role-badge ${
														userData.role === 'user'
															? 'customer-badge'
															: 'baker-badge'
													}`}
												>
													{userData.role === 'user'
														? 'üõçÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å'
														: 'üë®‚Äçüç≥ –ö–æ–Ω–¥–∏—Ç–µ—Ä'}
												</span>
												<button
													className='change-role-link'
													onClick={() => setShowRoleSelection(true)}
												>
													–ò–∑–º–µ–Ω–∏—Ç—å
												</button>
											</div>

											<input
												type='file'
												accept='image/*'
												onChange={e => setProfileImage(e.target.files[0])}
												className='file-input'
											/>
											<textarea
												name='bio'
												placeholder='–û —Å–µ–±–µ'
												value={userData.bio}
												onChange={e =>
													setUserData({ ...userData, bio: e.target.value })
												}
												className='auth-textarea'
											></textarea>
										</>
									)}
									<button className='primary-button' onClick={handleUserAction}>
										{isLoginMode ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
									</button>
								</>
							) : null}
						</>
					)}

					{validationError && <p className='error-alert'>{validationError}</p>}

					{!showVerification && (
						<button
							className='toggle-mode-button'
							onClick={() => {
								setIsLoginMode(!isLoginMode)
								setValidationError('')
								setPhoneVerified(false)
								setShowRoleSelection(false)
								setUserData({
									name: '',
									bakeryName: '',
									email: '',
									password: '',
									role: '',
									bio: '',
									phone: '',
									location: '',
									priceRange: '',
								})
								setPasswordConfirm('')
								setProfileImage(null)
								setSmsCode('')
							}}
						>
							{isLoginMode
								? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å'
								: '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏'}
						</button>
					)}
				</div>
			</div>
		</main>
	)
}

export default Auth
